// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User Authentication Models
model User {
  id                String    @id @default(cuid())
  email             String    @unique
  emailVerified     DateTime?
  password          String?
  name              String?
  surname           String?
  phone             String?
  
  // Security
  passwordResetToken      String?   @unique
  passwordResetExpires    DateTime?
  emailVerificationToken  String?   @unique
  emailVerificationExpires DateTime?
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  accounts Account[]
  sessions Session[]
  orders   Order[]
  addresses Address[]
  reviews  Review[]
  favorites Favorite[]
  
  @@index([email])
  @@index([passwordResetToken])
  @@index([emailVerificationToken])
}

// NextAuth Models
model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@id([provider, providerAccountId])
  @@index([userId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
}

// Address Model
model Address {
  id          String  @id @default(cuid())
  userId      String
  title       String
  firstName   String
  lastName    String
  phone       String
  address     String
  city        String
  district    String
  postalCode  String?
  isDefault   Boolean @default(false)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  orders Order[]
  
  @@index([userId])
}

// Product Models
model Category {
  id          String  @id @default(cuid())
  name        String
  slug        String  @unique
  description String?
  image       String?
  parentId    String?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  parent   Category?  @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children Category[] @relation("CategoryHierarchy")
  products Product[]
  
  @@index([slug])
  @@index([parentId])
}

model Product {
  id             String   @id @default(cuid())
  name           String
  slug           String   @unique
  description    String?
  story          String?
  nutritionInfo  Json?
  price          Decimal  @db.Decimal(10, 2)
  discountPrice  Decimal? @db.Decimal(10, 2)
  sku            String   @unique
  stock          Int      @default(0)
  images         Json[]   // Detaylı görsel bilgileri için JSON array
  isActive       Boolean  @default(true)
  categoryId     String
  
  // SEO Fields
  metaTitle      String?
  metaDescription String?
  metaKeywords   String?
  ogTitle        String?
  ogDescription  String?
  ogImage        String?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  category   Category      @relation(fields: [categoryId], references: [id])
  variants   ProductVariant[]
  orderItems OrderItem[]
  reviews    Review[]
  favorites  Favorite[]
  
  @@index([slug])
  @@index([categoryId])
  @@index([isActive])
}

model ProductVariant {
  id        String  @id @default(cuid())
  productId String
  name      String
  value     String
  price     Decimal @db.Decimal(10, 2)
  stock     Int     @default(0)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  product    Product     @relation(fields: [productId], references: [id], onDelete: Cascade)
  orderItems OrderItem[]
  
  @@index([productId])
}

// Order Models
model Order {
  id            String      @id @default(cuid())
  orderNumber   String      @unique
  userId        String
  addressId     String
  status        OrderStatus @default(PENDING)
  paymentStatus PaymentStatus @default(PENDING)
  paymentMethod String?
  paymentId     String?
  
  subtotal      Decimal @db.Decimal(10, 2)
  shippingCost  Decimal @db.Decimal(10, 2)
  tax           Decimal @db.Decimal(10, 2)
  total         Decimal @db.Decimal(10, 2)
  
  notes         String?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  user      User        @relation(fields: [userId], references: [id])
  address   Address     @relation(fields: [addressId], references: [id])
  items     OrderItem[]
  
  @@index([userId])
  @@index([orderNumber])
  @@index([status])
}

model OrderItem {
  id         String  @id @default(cuid())
  orderId    String
  productId  String
  variantId  String?
  quantity   Int
  price      Decimal @db.Decimal(10, 2)
  total      Decimal @db.Decimal(10, 2)
  
  order   Order           @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product         @relation(fields: [productId], references: [id])
  variant ProductVariant? @relation(fields: [variantId], references: [id])
  
  @@index([orderId])
  @@index([productId])
}

// Review Model
model Review {
  id        String @id @default(cuid())
  userId    String
  productId String
  rating    Int
  comment   String?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  @@unique([userId, productId])
  @@index([productId])
  @@index([userId])
}

// Favorite Model
model Favorite {
  id        String @id @default(cuid())
  userId    String
  productId String
  
  createdAt DateTime @default(now())
  
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  @@unique([userId, productId])
  @@index([userId])
}

// Enums
enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

enum PaymentStatus {
  PENDING
  PROCESSING
  SUCCESS
  FAILED
  REFUNDED
}
